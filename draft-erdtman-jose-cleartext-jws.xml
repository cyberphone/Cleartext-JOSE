<?xml version="1.0" encoding="US-ASCII"?>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">

<?rfc strict="yes" ?>
<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes" ?>
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>

<rfc category="info" docName="draft-erdtman-jose-cleartext-jws-00" ipr="trust200902">
 <front>
   <title abbrev="draft-erdtman-jose-cleartext-jws">
     Cleartext JSON Web Signature (JWS)
   </title>

   <author fullname="Anders Rundgren" initials="A." surname="Rundgren">
     <organization>Independent</organization>
     <address>
       <postal>
         <street></street>
         <code></code> <city></city>
         <country>France</country>
       </postal>
       <email>anders.rundgren.net@gmail.com</email>
     </address>
   </author>

   <author fullname="Samuel Erdtman" initials="S." surname="Erdtman">
     <organization>Spotify AB</organization>
     <address>
       <postal>
         <street>Birger Jarlsgatan 61, 4tr</street>
         <code>113 56</code> <city>Stockholm</city>
         <country>Sweden</country>
       </postal>
       <email>erdtman@spotify.com</email>
     </address>
   </author>

    <author fullname="Michael B. Jones" initials="M.B." surname="Jones">
      <organization abbrev="Microsoft">Microsoft</organization>
      <address>
        <email>mbj@microsoft.com</email>
	<uri>http://self-issued.info/</uri>
      </address>
    </author>

   <date year="2018" />

   <area>Security</area>

   <workgroup>JSON Object Signing and Encryption (JOSE)</workgroup>

   <keyword>
     JOSE, Signing, Encryption, Cleartext
   </keyword>

   <abstract>
     <t>
       Cleartext JSON Web Signature (JWS) represents signed data as cleartext JSON objects.
       The signature is included in the JSON object to be signed.
       Cleartext JWS builds on JWS <xref target="RFC7515"/>, JWA
       <xref target="RFC7518"/> and JWK <xref target="RFC7517"/>,
       including for representations of header parameters, algorithms, and cryptographic keys.
       Serialization of the JSON object to be signed uses the predictable
       serialization defined in ECMAScript version 6.
       Cleartext JWS reuses data structures and semantics from JWS whenever practical and reasonable.
       Cryptographic algorithms and identifiers used by this specification
       are defined in the JSON Web Algorithms specification.
     </t>
   </abstract>
 </front>

<middle>
  <section title="Introduction">
    <t>
      Cleartext JSON Web Signature (JWS) represents signed data as cleartext JSON <xref target="RFC8259"/> objects.
      The signature is included in the JSON object to be signed.
      By enveloping the signature in the JSON object to be signed, it is easy to
      inspect data in transit and when archived, integrity can be guaranteed.
      Cryptographic algorithms and identifiers used by this specification
      are defined in the JSON Web Algorithms (JWA) <xref target="RFC7518" /> specification.
    </t>
    <t>
      Cleartext JWS reuses constructs from JWS, JWA, and JWK whenever practical and reasonable.
      Header parameters from JWS, algorithms from JWA, and the key representation JWK are used.
      There are two essential differences from JWS.
      First, Cleartext JWS signatures are included in the signed data.
      Second, Cleartext JWS depends on predictable JSON Serialization
      rather than base64url encoding the data to be signed.
    </t>
    <t>
      In the following example, there are a few things to note.
      The signature is included in the data.
      The members in the <spanx style="verb">__cleartext_signature</spanx> object are the JWS
      header parameters.
      The <spanx style="verb">signature</spanx> member contains the base64url encoded signature bytes.
      <figure align="center" anchor="fig:examplesignature" title='Cleartext JWS signed example'>
  	    <artwork>
<![CDATA[
{
  "iss":"joe",
  "exp":1300819380,
  "http://example.com/is_root":true,
  "__cleartext_signature": {
    "alg": "ES256",
    "jwk": {
      "kty": "EC",
      "crv": "P-256",
      "x": "_gow8fcS3Dx9z6j57U5q8tunnRBdrgLU9A7CZTYCnqU",
      "y": "bdfJGraBVL5aPj38TG4tHwxpU2VKwG1XBp0wQfCLOFQ"
    },
    "signature": "aRx2MQyCGVOZGViAC_7bEDUp8_CGO1kU1l7Lvp1FHx4qBiPkGs9Z7TKGK774XLTGwaCfUtd1VrscabQhmArCxA"
  }
}
]]>
        </artwork>
      </figure>
      <!-- TBD The examples should include the keys used so that they can be reproduced and validated -->
    </t>
  </section>

  <section title="Terminology">
    <t>
      The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
      NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED",
      "MAY", and "OPTIONAL" in this document are to be interpreted as
      described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/>
      when, and only when, they appear in all capitals, as shown here.
    </t>
  </section>

  <section anchor="HeaderParameters" title="The __cleartext_signature Member">
    <t>
      The <spanx style="verb">__cleartext_signature</spanx> member that is added to the data contains the JWS
      header parameters and the signature value.
    </t>
    <t>
      When putting the header parameters into the data to be signed, they MUST
      be labeled with the key <spanx style="verb">__cleartext_signature</spanx>, i.e., the object to be signed
      cannot have its own root item that is named <spanx style="verb">__cleartext_signature</spanx>.
    </t>
    <section anchor="SignatureValue" title="The signature Member">
      <t>
        This specification defines the new member <spanx style="verb">signature</spanx>. The value
        of this member contains the base64url-encoded signature as a string.
      </t>
    </section>
    <section anchor="Signers" title="The signers Member">
      <t>
        TBD
      </t>
    </section>
  </section>

  <section anchor="ProducingConsumingCleartextJWSs" title="Producing and Consuming Cleartext JWSs">
    <section anchor="MessageSignatureMACComputation" title="Message Signature or MAC Computation">
      <t>
        To create a JSC, the following steps are performed.  The order of the
        steps is not significant in cases where there are no dependencies
        between the inputs and outputs of the steps.
      </t>
      <t>
        <list style="numbers">
          <t>
            Create the JSON object to be signed.
          </t>
          <t>
            Create the <spanx style="verb">__cleartext_signature</spanx> object with the header parameters to be used and add it
            as a top-level member to the object to be signed with the key
            <spanx style="verb">__cleartext_signature</spanx>.
          </t>
          <t>
            Serialize the object to be signed using the Serialization and
            normalization rules defined in
            <xref target="Serialization" />
          </t>
          <t>
            Compute the signature in the manner defined for the particular
            algorithm being used over the serialized object to be signed. The
            <spanx style="verb">alg</spanx> (algorithm) Header Parameter MUST be present in the <spanx style="verb">__cleartext_signature</spanx>
            member, with the algorithm value accurately representing the
            algorithm used to construct the JWS Signature.
          </t>
          <t>
            Add the <spanx style="verb">signature</spanx> member to the signature object with the encoded
            Cleartext JWS signature, BASE64URL(JWE Signature).
          </t>
        </list>
      </t>
    </section>
    <section anchor="MessageSignatureMACValidation" title="Message Signature or MAC Validation">
      <t>
        When validating a Cleartext JWS, the following steps are performed.  The order
        of the steps is not significant in cases where there are no
        dependencies between the inputs and outputs of the steps.  If any of
        the listed steps fails, then the input MUST be rejected.
      </t>
      <t>
        When there are multiple Cleartext JWS Signature values, it is an application
        decision which of the Cleartext JWS Signature values must successfully validate
        for the Cleartext JWS to be accepted.  In some cases, all must successfully
        validate, or the Cleartext JWS will be considered invalid.  In other cases,
        only a specific Cleartext JWS Signature value needs to be successfully
        validated.  However, in all cases, at least one Cleartext JWS Signature value
        MUST successfully validate, or the Cleartext JWS MUST be considered invalid.
      </t>
      <t>
        <list style="numbers">
          <t>
            Parse JSON data including enveloped signature.
          </t>
          <t>
            Verify that the implementation understands and can process all
            fields that it is required to support, whether required by this
            specification, by the algorithm being used, or by the <spanx style="verb">crit</spanx>
            Header Parameter value, and that the values of those parameters
            are also understood and supported.
          </t>
          <t>
            Save and remove the <spanx style="verb">signature</spanx> member from the signature object and
            base64url-decode the encoded representation of the Cleartext JWS Signature.
          </t>
          <t>
            Serialize and normalize the signed object including the signature
            object, by following the rules in
            <xref target="Serialization" />.
          </t>
          <t>
            Validate the Cleartext JWS Signature against the Cleartext JWS Signing Input, i.e., the
            Serialized and Normalized data, in the manner defined for the
            algorithm being used, which MUST be accurately represented by the
            value of the <spanx style="verb">alg</spanx> (algorithm) Header Parameter value,
	    which MUST be present. Record whether the
            validation succeeded or not.
          </t>
          <t>
            Return a result indicating whether or not the Cleartext JWS was
            successfully validated.
          </t>
          <t>
            For later validation of the signed object, put back the <spanx style="verb">signature</spanx>
            member back into the JSON data structure.
          </t>
        </list>
      </t>
    </section>
    <section anchor="Serialization" title="Serialization">
      <t>
        When having header parameters in cleartext serialization of them needs to be
        consistent across platforms. JSON <xref target="RFC8259" /> by itself does not produce
        predictable serialization of data. However, ES6 <xref target="ES6"/> defines how to produce
        JSON that is predictable. By following the ES6 serialization directives,
        one gets predictable results, i.e., the JSON serializer MUST follow the
        directives set out by ES6 when serializing data. The rules defined below
        take the essence from the ES6 specification and list what that means
        in practical terms.
      </t>
      <t>
        Rules for serialization:
        <list style="symbols">
          <t>
            The original property serialization order MUST be preserved as
            described by ECMAScript section 9.1.12.
          </t>
          <t>
            JSON data of the type <spanx style="verb">Number</spanx>, MUST be processed according to
            ECMAScript section 7.1.12.1.
          </t>
          <t>
            Property names MUST NOT be empty ("").
          </t>
          <t>
            Property names MUST be unique.
          </t>
          <t>
            Whitespace must be removed which in practical terms means removal
            of all characters outside of quoted strings having a value of x09,
            x0a, x0d or x20.
	    <!-- What about the ASCII Vertical Tab character (0x0b), which is also whitespace? -->
          </t>
          <t>
            JSON '\/' escape sequences within quoted strings must be treated as
            "degenerate" equivalents to '/' by rewriting them.
          </t>
          <t>
            Unicode escape sequences (\uhhhh) within quoted strings must be
            adjusted as follows: If the Unicode value falls within the
            traditional ASCII control character range (0x00-0x1f and 0x7f), it must
            be rewritten in lowercase hexadecimal notation unless it is one
            of the predefined JSON escapes (\" \\ \b \f \n \r \t) because
            the latter have precedence. If the Unicode value is outside of
            the ASCII control character range, it must be replaced by the
            corresponding Unicode character. ECMAScript section 24.3.2.2.
          </t>
        </list>
      </t>
      <t>
        When rules have been applied to the example signature it looks like this
	(with line wraps within values for display purposes only):

        <figure align="center" anchor="fig:NormalizedExample" title='Normalized example'>
          <artwork>
<![CDATA[
{"iss":"joe","exp":1300819380,"http://example.com/is_root":true,
"__cleartext_signature":{"alg":"ES256","jwk":{"kty":"EC","crv":"P-256","x":
"_gow8fcS3Dx9z6j57U5q8tunnRBdrgLU9A7CZTYCnqU","y":"bdfJGraBVL5aP
j38TG4tHwxpU2VKwG1XBp0wQfCLOFQ"}}}
]]>
          </artwork>
        </figure>
	<!-- TBD Include non-ASCII Unicode characters in the example, such as a UK Pound symbol and/or a Euro currency symbol -->
      </t>
      <section anchor="ES6Interoperability" title="ES6+ Interoperability">
        <t>
          For JavaScript optimization reasons, ES6+'s JSON.parse() internally
          rearranges the order of properties with names expressed as integers, making a
          parsed JSON string like '{"2":"a", "A":"b","1":"c"}' actually serialize as
          '{"1":"c","2":"a","A":"b"}'. Due to this fact, signature creators MUST in
          a here unspecified way, "emulate" this scheme since this behavior is not
          intended to be an additional requirement to support by JSON tools in
          general in order to use this specification.
	  Note:  This "unspecified" behavior MUST be specified for this spec to become actionable and interoperable!
        </t>
      </section>
    </section>
    <section anchor="MultipleSignatures" title="Multiple Signatures">
      <t>
        Multiple signatures enable different keys to independently of each other
        add a signature to a JSON object.
      </t>
      <t>
        The normalization procedure is essentially the same as for single
        signatures but must also take the following in account as well:
        <list style="symbols">
          <t>
            The <spanx style="verb">__cleartext_signature</spanx> property must contain an array
            of signature constructs.
          </t>
          <t>
            Each signature requires its own normalization process. During this
            process, the other signature objects must (temporarily) be removed.
          </t>
        </list>
      </t>
    </section>
  </section>

  <section anchor="SignatureScope" title="Signature Scope">
    <t>
      The scope of a signature, what is actually signed, comprises all
      properties including possible child objects of the JSON object holding
      the signature property except for the <spanx style="verb">__cleartext_signature</spanx> member.
    </t>
  </section>

  <section anchor="NamingConventions" title="Naming Conventions">
    <t>
      JSON member names introduced by this specification that are to be
      interspersed in application-defined JSON objects include the prefix
      <spanx style="verb">__cleartext_</spanx> so as to avoid potential conflicts
      with names used by applications.
    </t>
  </section>

  <section anchor="IANA" title="IANA Considerations">
      <section anchor="IANAJSONHeaderParametersRegistry" title="JSON Header Parameters Registry">
        <t>
          This section registers the <spanx style="verb">signature</spanx>
          and <spanx style="verb">signers</spanx> header parameter in the "JSON Web
          Signature and Encryption Header Parameters" registry
          in the manner described in <xref target="RFC7515"/>, which is used to
          hold the signature value of the JCS.
        </t>
        <section anchor="IANAJSONHeaderParametersRegistryContents" title="Registry Contents">
          <t>
            <list style='symbols'>
              <t>Header Parameter Name: <spanx style="verb">signature</spanx></t>
              <t>Header Parameter Description: The base64url-encoded signature value.</t>
              <t>Header Parameter Usage Location(s): <spanx style="verb">CT-JWS</spanx></t>
              <t>Change Controller: IESG</t>
              <t>Specification Document(s): <xref target="SignatureValue"/></t>
            </list>
            <list style='symbols'>
              <t>Header Parameter Name: <spanx style="verb">signers</spanx></t>
              <t>Header Parameter Description: List of signers, each with a set of headers and a signature.</t>
              <t>Header Parameter Usage Location(s): <spanx style="verb">CT-JWS</spanx></t>
              <t>Change Controller: IESG</t>
              <t>Specification Document(s): <xref target="SignatureValue"/></t>
            </list>
          </t>
        </section>
      </section>
    </section>

  <section anchor="Security" title="Security Considerations">
    <t>
      This specification does (to the author's knowledge), not introduce
      additional vulnerabilities over what is specified for JWS
      <xref target="RFC7515"/>.
    </t>
  </section>

  <section anchor="Acknowledgements" title="Acknowledgements">
    <t>
      This document builds on the work done in the JOSE WG so a big thanks goes out
      to all involved in that work. It is specifically inspired by JWS, so a
      special thanks to the authors of that document, Michael B. Jones, John Bradley,
      and Nat Sakimura.
    </t>
  </section>
 </middle>

 <back>
   <references title="Normative References">
     <?rfc include='reference.RFC.2119'?>
     <?rfc include='reference.RFC.8259'?>
     <?rfc include='reference.RFC.7515'?>
     <?rfc include='reference.RFC.7517'?>
     <?rfc include='reference.RFC.7518'?>
     <?rfc include='reference.RFC.8174'?>

     <reference anchor="ES6" target="https://www.ecma-international.org/ecma-262/6.0/ECMA-262.pdf">
       <front>
         <title>ECMAScript 2015 Language Specification</title>
         <author>
           <organization>Ecma International</organization>
         </author>
         <date/>
       </front>
     </reference>
   </references>

   <section anchor="TestVectors" title="Test Vectors">
     <t>
       TBD
     </t>
   </section>
 </back>
</rfc>
